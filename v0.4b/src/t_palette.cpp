#include "t_palette.h"

t_palette::t_palette()
{
	reset();
}

t_palette::t_palette(const t_palette& other)
{
	copy_from(other);
}

t_palette& t_palette::operator=(const t_palette& other)
{
	if (this == &other)
		return *this;

	copy_from(other);

	return *this;
}

void t_palette::copy_from(const t_palette& other)
{
	remove_all();
	for (int i = 0; i < other.colors.size(); i++) {
		colors.emplace_back(other.colors[i]);
	}
}

void t_palette::remove_all()
{
	colors.clear();
}

void t_palette::add(const t_color& color)
{
	colors.emplace_back(color);
}

t_color& t_palette::get(t_index index)
{
	return colors[index];
}

void t_palette::set(t_index index, const t_color& color)
{
	colors[index] = color;
}

int t_palette::size() const
{
	return (int)colors.size();
}

void t_palette::reset()
{
	remove_all();
	
	add(0x000000);
	add(0x111111);
	add(0x222222);
	add(0x333333);
	add(0x444444);
	add(0x555555);
	add(0x666666);
	add(0x777777);
	add(0x888888);
	add(0x999999);
	add(0xaaaaaa);
	add(0xbbbbbb);
	add(0xcccccc);
	add(0xdddddd);
	add(0xeeeeee);
	add(0xffffff);
	add(0x190700);
	add(0x2a1800);
	add(0x3b2900);
	add(0x4c3a00);
	add(0x5d4b00);
	add(0x6e5c00);
	add(0x7f6d00);
	add(0x907e09);
	add(0xa18f1a);
	add(0xb3a02b);
	add(0xc3b13c);
	add(0xd4c24d);
	add(0xe5d35e);
	add(0xf7e46f);
	add(0xfff582);
	add(0xffff96);
	add(0x310000);
	add(0x3f0000);
	add(0x531700);
	add(0x642800);
	add(0x753900);
	add(0x864a00);
	add(0x975b0a);
	add(0xa86c1b);
	add(0xb97d2c);
	add(0xca8e3d);
	add(0xdb9f4e);
	add(0xecb05f);
	add(0xfdc170);
	add(0xffd285);
	add(0xffe39c);
	add(0xfff4b2);
	add(0x420404);
	add(0x4f0000);
	add(0x600800);
	add(0x711900);
	add(0x822a0d);
	add(0x933b1e);
	add(0xa44c2f);
	add(0xb55d40);
	add(0xc66e51);
	add(0xd77f62);
	add(0xe89073);
	add(0xf9a183);
	add(0xffb298);
	add(0xffc3ae);
	add(0xffd4c4);
	add(0xffe5da);
	add(0x410103);
	add(0x50000f);
	add(0x61001b);
	add(0x720f2b);
	add(0x83203c);
	add(0x94314d);
	add(0xa5425e);
	add(0xb6536f);
	add(0xc76480);
	add(0xd87591);
	add(0xe986a2);
	add(0xfa97b3);
	add(0xffa8c8);
	add(0xffb9de);
	add(0xffcaef);
	add(0xfbdcf6);
	add(0x330035);
	add(0x440041);
	add(0x55004c);
	add(0x660c5c);
	add(0x771d6d);
	add(0x882e7e);
	add(0x993f8f);
	add(0xaa50a0);
	add(0xbb61b1);
	add(0xcc72c2);
	add(0xdd83d3);
	add(0xee94e4);
	add(0xffa5e4);
	add(0xffb6e9);
	add(0xffc7ee);
	add(0xffd8f3);
	add(0x1d005c);
	add(0x2e0068);
	add(0x400074);
	add(0x511084);
	add(0x622195);
	add(0x7332a6);
	add(0x8443b7);
	add(0x9554c8);
	add(0xa665d9);
	add(0xb776ea);
	add(0xc887eb);
	add(0xd998eb);
	add(0xe9a9ec);
	add(0xfbbaeb);
	add(0xffcbef);
	add(0xffdff9);
	add(0x020071);
	add(0x13007d);
	add(0x240b8c);
	add(0x351c9d);
	add(0x462dae);
	add(0x573ebf);
	add(0x684fd0);
	add(0x7960e1);
	add(0x8a71f2);
	add(0x9b82f7);
	add(0xac93f7);
	add(0xbda4f7);
	add(0xceb5f7);
	add(0xdfc6f7);
	add(0xf0d7f7);
	add(0xffe8f8);
	add(0x000068);
	add(0x000a7c);
	add(0x081b90);
	add(0x192ca1);
	add(0x2a3db2);
	add(0x3b4ec3);
	add(0x4c5fd4);
	add(0x5d70e5);
	add(0x6e81f6);
	add(0x7f92ff);
	add(0x90a3ff);
	add(0xa1b4ff);
	add(0xb2c5ff);
	add(0xc3d6ff);
	add(0xd4e7ff);
	add(0xe5f8ff);
	add(0x000a4d);
	add(0x001b63);
	add(0x002c79);
	add(0x023d8f);
	add(0x134ea0);
	add(0x245fb1);
	add(0x3570c2);
	add(0x4681d3);
	add(0x5792e4);
	add(0x68a3f5);
	add(0x79b4ff);
	add(0x8ac5ff);
	add(0x9bd6ff);
	add(0xace7ff);
	add(0xbdf8ff);
	add(0xceffff);
	add(0x001a26);
	add(0x002b3c);
	add(0x003c52);
	add(0x004d68);
	add(0x065e7c);
	add(0x176f8d);
	add(0x28809e);
	add(0x3991af);
	add(0x4aa2c0);
	add(0x5bb3d1);
	add(0x6cc4e2);
	add(0x7dd5f3);
	add(0x8ee6ff);
	add(0x9ff7ff);
	add(0xb0ffff);
	add(0xc1ffff);
	add(0x01250a);
	add(0x023610);
	add(0x004622);
	add(0x005738);
	add(0x05684d);
	add(0x16795e);
	add(0x278a6f);
	add(0x389b80);
	add(0x49ac91);
	add(0x5abda2);
	add(0x6bceb3);
	add(0x7cdfc4);
	add(0x8df0d5);
	add(0x9effe5);
	add(0xaffff1);
	add(0xc0fffd);
	add(0x04260d);
	add(0x043811);
	add(0x054713);
	add(0x005a1b);
	add(0x106b1b);
	add(0x217c2c);
	add(0x328d3d);
	add(0x439e4e);
	add(0x54af5f);
	add(0x65c070);
	add(0x76d181);
	add(0x87e292);
	add(0x98f3a3);
	add(0xa9ffb3);
	add(0xbaffbf);
	add(0xcbffcb);
	add(0x00230a);
	add(0x003510);
	add(0x044613);
	add(0x155613);
	add(0x266713);
	add(0x377813);
	add(0x488914);
	add(0x599a25);
	add(0x6aab36);
	add(0x7bbc47);
	add(0x8ccd58);
	add(0x9dde69);
	add(0xaeef7a);
	add(0xbfff8b);
	add(0xd0ff97);
	add(0xe1ffa3);
	add(0x001707);
	add(0x0e2808);
	add(0x1f3908);
	add(0x304a08);
	add(0x415b08);
	add(0x526c08);
	add(0x637d08);
	add(0x748e0d);
	add(0x859f1e);
	add(0x96b02f);
	add(0xa7c140);
	add(0xb8d251);
	add(0xc9e362);
	add(0xdaf473);
	add(0xebff82);
	add(0xfcff8e);
	add(0x1b0701);
	add(0x2c1801);
	add(0x3c2900);
	add(0x4d3b00);
	add(0x5f4c00);
	add(0x705e00);
	add(0x816f00);
	add(0x938009);
	add(0xa4921a);
	add(0xb2a02b);
	add(0xc7b43d);
	add(0xd8c64e);
	add(0xead760);
	add(0xf6e46f);
	add(0xfffa84);
	add(0xffff99);

	/*
	for (int i = 0; i < 256; i++)
		add(0x000000);

	set(0, 0x101010);
	set(1, 0xe0e0e0);
	*/
}
